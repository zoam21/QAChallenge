"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const array_find_1 = __importDefault(require("array-find"));
const get_installations_1 = __importDefault(require("./get-installations"));
const fs_exists_promised_1 = __importDefault(require("../utils/fs-exists-promised"));
const aliases_1 = __importDefault(require("../aliases"));
//Const
const DEFAULT_ALIAS = {
    cmd: '',
    macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}}'
};
//API
/**
 * Returns information about the specified browser.
 * @function
 * @async
 * @name getBrowserInfo
 * @param {string} browser - A browser alias ('chrome', 'firefox', etc.) or a path to the browser's executable file.
 * @returns {BrowserInfo} An object that contains information about the specified browser.
 */
async function default_1(browser) {
    const installations = await get_installations_1.default();
    const browserAsAlias = browser.trim().toLowerCase();
    if (installations[browserAsAlias])
        return installations[browserAsAlias];
    const fileExists = await fs_exists_promised_1.default(browser);
    if (!fileExists)
        return null;
    const detectedAlias = array_find_1.default(Object.keys(aliases_1.default), key => {
        const alias = aliases_1.default[key];
        if (alias.nameRe)
            return alias.nameRe.test(browser);
        return false;
    });
    const { cmd, macOpenCmdTemplate } = detectedAlias ? aliases_1.default[detectedAlias] : DEFAULT_ALIAS;
    return { path: browser, cmd, macOpenCmdTemplate };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWJyb3dzZXItaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvZ2V0LWJyb3dzZXItaW5mby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUE4QjtBQUM5Qiw0RUFBbUQ7QUFDbkQscUZBQWlEO0FBQ2pELHlEQUFpQztBQUdqQyxPQUFPO0FBQ1AsTUFBTSxhQUFhLEdBQUc7SUFDbEIsR0FBRyxFQUFpQixFQUFFO0lBQ3RCLGtCQUFrQixFQUFFLDhDQUE4QztDQUNyRSxDQUFDO0FBR0YsS0FBSztBQUNMOzs7Ozs7O0dBT0c7QUFDWSxLQUFLLG9CQUFXLE9BQU87SUFDbEMsTUFBTSxhQUFhLEdBQUcsTUFBTSwyQkFBZ0IsRUFBRSxDQUFDO0lBRS9DLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVwRCxJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUM7UUFDN0IsT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFekMsTUFBTSxVQUFVLEdBQUcsTUFBTSw0QkFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXpDLElBQUksQ0FBQyxVQUFVO1FBQ1gsT0FBTyxJQUFJLENBQUM7SUFFaEIsTUFBTSxhQUFhLEdBQUcsb0JBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFPLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUNuRCxNQUFNLEtBQUssR0FBRyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTNCLElBQUksS0FBSyxDQUFDLE1BQU07WUFDWixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXRDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsaUJBQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO0lBRTNGLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxDQUFDO0FBQ3RELENBQUM7QUF6QkQsNEJBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpbmQgZnJvbSAnYXJyYXktZmluZCc7XG5pbXBvcnQgZ2V0SW5zdGFsbGF0aW9ucyBmcm9tICcuL2dldC1pbnN0YWxsYXRpb25zJztcbmltcG9ydCBleGlzdHMgZnJvbSAnLi4vdXRpbHMvZnMtZXhpc3RzLXByb21pc2VkJztcbmltcG9ydCBBTElBU0VTIGZyb20gJy4uL2FsaWFzZXMnO1xuXG5cbi8vQ29uc3RcbmNvbnN0IERFRkFVTFRfQUxJQVMgPSB7XG4gICAgY21kOiAgICAgICAgICAgICAgICAnJyxcbiAgICBtYWNPcGVuQ21kVGVtcGxhdGU6ICdvcGVuIC1uIC1hIFwie3t7cGF0aH19fVwiIC0tYXJncyB7e3twYWdlVXJsfX19J1xufTtcblxuXG4vL0FQSVxuLyoqXG4gKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzcGVjaWZpZWQgYnJvd3Nlci5cbiAqIEBmdW5jdGlvblxuICogQGFzeW5jXG4gKiBAbmFtZSBnZXRCcm93c2VySW5mb1xuICogQHBhcmFtIHtzdHJpbmd9IGJyb3dzZXIgLSBBIGJyb3dzZXIgYWxpYXMgKCdjaHJvbWUnLCAnZmlyZWZveCcsIGV0Yy4pIG9yIGEgcGF0aCB0byB0aGUgYnJvd3NlcidzIGV4ZWN1dGFibGUgZmlsZS5cbiAqIEByZXR1cm5zIHtCcm93c2VySW5mb30gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNwZWNpZmllZCBicm93c2VyLlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoYnJvd3Nlcikge1xuICAgIGNvbnN0IGluc3RhbGxhdGlvbnMgPSBhd2FpdCBnZXRJbnN0YWxsYXRpb25zKCk7XG5cbiAgICBjb25zdCBicm93c2VyQXNBbGlhcyA9IGJyb3dzZXIudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoaW5zdGFsbGF0aW9uc1ticm93c2VyQXNBbGlhc10pXG4gICAgICAgIHJldHVybiBpbnN0YWxsYXRpb25zW2Jyb3dzZXJBc0FsaWFzXTtcblxuICAgIGNvbnN0IGZpbGVFeGlzdHMgPSBhd2FpdCBleGlzdHMoYnJvd3Nlcik7XG5cbiAgICBpZiAoIWZpbGVFeGlzdHMpXG4gICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgZGV0ZWN0ZWRBbGlhcyA9IGZpbmQoT2JqZWN0LmtleXMoQUxJQVNFUyksIGtleSA9PiB7XG4gICAgICAgIGNvbnN0IGFsaWFzID0gQUxJQVNFU1trZXldO1xuXG4gICAgICAgIGlmIChhbGlhcy5uYW1lUmUpXG4gICAgICAgICAgICByZXR1cm4gYWxpYXMubmFtZVJlLnRlc3QoYnJvd3Nlcik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgeyBjbWQsIG1hY09wZW5DbWRUZW1wbGF0ZSB9ID0gZGV0ZWN0ZWRBbGlhcyA/IEFMSUFTRVNbZGV0ZWN0ZWRBbGlhc10gOiBERUZBVUxUX0FMSUFTO1xuXG4gICAgcmV0dXJuIHsgcGF0aDogYnJvd3NlciwgY21kLCBtYWNPcGVuQ21kVGVtcGxhdGUgfTtcbn1cbiJdfQ==